// Generated by gencpp from file car_agilex/ScoutMotionCmdRequest.msg
// DO NOT EDIT!


#ifndef CAR_AGILEX_MESSAGE_SCOUTMOTIONCMDREQUEST_H
#define CAR_AGILEX_MESSAGE_SCOUTMOTIONCMDREQUEST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace car_agilex
{
template <class ContainerAllocator>
struct ScoutMotionCmdRequest_
{
  typedef ScoutMotionCmdRequest_<ContainerAllocator> Type;

  ScoutMotionCmdRequest_()
    : linear_velocity(0.0)
    , angular_velocity(0.0)  {
    }
  ScoutMotionCmdRequest_(const ContainerAllocator& _alloc)
    : linear_velocity(0.0)
    , angular_velocity(0.0)  {
  (void)_alloc;
    }



   typedef double _linear_velocity_type;
  _linear_velocity_type linear_velocity;

   typedef double _angular_velocity_type;
  _angular_velocity_type angular_velocity;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(max_linear_velocity)
  #undef max_linear_velocity
#endif
#if defined(_WIN32) && defined(min_linear_velocity)
  #undef min_linear_velocity
#endif
#if defined(_WIN32) && defined(max_angular_velocity)
  #undef max_angular_velocity
#endif
#if defined(_WIN32) && defined(min_angular_velocity)
  #undef min_angular_velocity
#endif


  static const double max_linear_velocity;
  static const double min_linear_velocity;
  static const double max_angular_velocity;
  static const double min_angular_velocity;

  typedef boost::shared_ptr< ::car_agilex::ScoutMotionCmdRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::car_agilex::ScoutMotionCmdRequest_<ContainerAllocator> const> ConstPtr;

}; // struct ScoutMotionCmdRequest_

typedef ::car_agilex::ScoutMotionCmdRequest_<std::allocator<void> > ScoutMotionCmdRequest;

typedef boost::shared_ptr< ::car_agilex::ScoutMotionCmdRequest > ScoutMotionCmdRequestPtr;
typedef boost::shared_ptr< ::car_agilex::ScoutMotionCmdRequest const> ScoutMotionCmdRequestConstPtr;

// constants requiring out of line definition

   
   template<typename ContainerAllocator> const double
      ScoutMotionCmdRequest_<ContainerAllocator>::max_linear_velocity =
        
          1.5
        
        ;
   

   
   template<typename ContainerAllocator> const double
      ScoutMotionCmdRequest_<ContainerAllocator>::min_linear_velocity =
        
          -1.5
        
        ;
   

   
   template<typename ContainerAllocator> const double
      ScoutMotionCmdRequest_<ContainerAllocator>::max_angular_velocity =
        
          0.5235
        
        ;
   

   
   template<typename ContainerAllocator> const double
      ScoutMotionCmdRequest_<ContainerAllocator>::min_angular_velocity =
        
          -0.5235
        
        ;
   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::car_agilex::ScoutMotionCmdRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::car_agilex::ScoutMotionCmdRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::car_agilex::ScoutMotionCmdRequest_<ContainerAllocator1> & lhs, const ::car_agilex::ScoutMotionCmdRequest_<ContainerAllocator2> & rhs)
{
  return lhs.linear_velocity == rhs.linear_velocity &&
    lhs.angular_velocity == rhs.angular_velocity;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::car_agilex::ScoutMotionCmdRequest_<ContainerAllocator1> & lhs, const ::car_agilex::ScoutMotionCmdRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace car_agilex

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::car_agilex::ScoutMotionCmdRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::car_agilex::ScoutMotionCmdRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::car_agilex::ScoutMotionCmdRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::car_agilex::ScoutMotionCmdRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::car_agilex::ScoutMotionCmdRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::car_agilex::ScoutMotionCmdRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::car_agilex::ScoutMotionCmdRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "e5bb7e8fb90e454b90ac55e1a766f7d6";
  }

  static const char* value(const ::car_agilex::ScoutMotionCmdRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xe5bb7e8fb90e454bULL;
  static const uint64_t static_value2 = 0x90ac55e1a766f7d6ULL;
};

template<class ContainerAllocator>
struct DataType< ::car_agilex::ScoutMotionCmdRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "car_agilex/ScoutMotionCmdRequest";
  }

  static const char* value(const ::car_agilex::ScoutMotionCmdRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::car_agilex::ScoutMotionCmdRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64 linear_velocity\n"
"float64 angular_velocity\n"
"\n"
"float64 max_linear_velocity=1.5\n"
"float64 min_linear_velocity=-1.5\n"
"float64 max_angular_velocity=0.5235\n"
"float64 min_angular_velocity=-0.5235\n"
"\n"
;
  }

  static const char* value(const ::car_agilex::ScoutMotionCmdRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::car_agilex::ScoutMotionCmdRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.linear_velocity);
      stream.next(m.angular_velocity);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ScoutMotionCmdRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::car_agilex::ScoutMotionCmdRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::car_agilex::ScoutMotionCmdRequest_<ContainerAllocator>& v)
  {
    s << indent << "linear_velocity: ";
    Printer<double>::stream(s, indent + "  ", v.linear_velocity);
    s << indent << "angular_velocity: ";
    Printer<double>::stream(s, indent + "  ", v.angular_velocity);
  }
};

} // namespace message_operations
} // namespace ros

#endif // CAR_AGILEX_MESSAGE_SCOUTMOTIONCMDREQUEST_H
