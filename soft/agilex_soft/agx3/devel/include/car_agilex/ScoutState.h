// Generated by gencpp from file car_agilex/ScoutState.msg
// DO NOT EDIT!


#ifndef CAR_AGILEX_MESSAGE_SCOUTSTATE_H
#define CAR_AGILEX_MESSAGE_SCOUTSTATE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <car_agilex/ActuatorState.h>
#include <car_agilex/LightState.h>
#include <car_agilex/LightState.h>

namespace car_agilex
{
template <class ContainerAllocator>
struct ScoutState_
{
  typedef ScoutState_<ContainerAllocator> Type;

  ScoutState_()
    : base_state(0)
    , control_mode(0)
    , fault_code(0)
    , battery_voltage(0.0)
    , actuator_states()
    , light_control_enabled(false)
    , front_light_state()
    , rear_light_state()
    , linear_velocity(0.0)
    , angular_velocity(0.0)
    , left_odometry(0.0)
    , right_odometry(0.0)  {
    }
  ScoutState_(const ContainerAllocator& _alloc)
    : base_state(0)
    , control_mode(0)
    , fault_code(0)
    , battery_voltage(0.0)
    , actuator_states(_alloc)
    , light_control_enabled(false)
    , front_light_state(_alloc)
    , rear_light_state(_alloc)
    , linear_velocity(0.0)
    , angular_velocity(0.0)
    , left_odometry(0.0)
    , right_odometry(0.0)  {
  (void)_alloc;
    }



   typedef uint8_t _base_state_type;
  _base_state_type base_state;

   typedef uint8_t _control_mode_type;
  _control_mode_type control_mode;

   typedef uint8_t _fault_code_type;
  _fault_code_type fault_code;

   typedef double _battery_voltage_type;
  _battery_voltage_type battery_voltage;

   typedef std::vector< ::car_agilex::ActuatorState_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::car_agilex::ActuatorState_<ContainerAllocator> >> _actuator_states_type;
  _actuator_states_type actuator_states;

   typedef uint8_t _light_control_enabled_type;
  _light_control_enabled_type light_control_enabled;

   typedef  ::car_agilex::LightState_<ContainerAllocator>  _front_light_state_type;
  _front_light_state_type front_light_state;

   typedef  ::car_agilex::LightState_<ContainerAllocator>  _rear_light_state_type;
  _rear_light_state_type rear_light_state;

   typedef double _linear_velocity_type;
  _linear_velocity_type linear_velocity;

   typedef double _angular_velocity_type;
  _angular_velocity_type angular_velocity;

   typedef double _left_odometry_type;
  _left_odometry_type left_odometry;

   typedef double _right_odometry_type;
  _right_odometry_type right_odometry;





  typedef boost::shared_ptr< ::car_agilex::ScoutState_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::car_agilex::ScoutState_<ContainerAllocator> const> ConstPtr;

}; // struct ScoutState_

typedef ::car_agilex::ScoutState_<std::allocator<void> > ScoutState;

typedef boost::shared_ptr< ::car_agilex::ScoutState > ScoutStatePtr;
typedef boost::shared_ptr< ::car_agilex::ScoutState const> ScoutStateConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::car_agilex::ScoutState_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::car_agilex::ScoutState_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::car_agilex::ScoutState_<ContainerAllocator1> & lhs, const ::car_agilex::ScoutState_<ContainerAllocator2> & rhs)
{
  return lhs.base_state == rhs.base_state &&
    lhs.control_mode == rhs.control_mode &&
    lhs.fault_code == rhs.fault_code &&
    lhs.battery_voltage == rhs.battery_voltage &&
    lhs.actuator_states == rhs.actuator_states &&
    lhs.light_control_enabled == rhs.light_control_enabled &&
    lhs.front_light_state == rhs.front_light_state &&
    lhs.rear_light_state == rhs.rear_light_state &&
    lhs.linear_velocity == rhs.linear_velocity &&
    lhs.angular_velocity == rhs.angular_velocity &&
    lhs.left_odometry == rhs.left_odometry &&
    lhs.right_odometry == rhs.right_odometry;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::car_agilex::ScoutState_<ContainerAllocator1> & lhs, const ::car_agilex::ScoutState_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace car_agilex

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::car_agilex::ScoutState_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::car_agilex::ScoutState_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::car_agilex::ScoutState_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::car_agilex::ScoutState_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::car_agilex::ScoutState_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::car_agilex::ScoutState_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::car_agilex::ScoutState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ad42d15ec27ffc879e399e0f8f4d5a2b";
  }

  static const char* value(const ::car_agilex::ScoutState_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xad42d15ec27ffc87ULL;
  static const uint64_t static_value2 = 0x9e399e0f8f4d5a2bULL;
};

template<class ContainerAllocator>
struct DataType< ::car_agilex::ScoutState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "car_agilex/ScoutState";
  }

  static const char* value(const ::car_agilex::ScoutState_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::car_agilex::ScoutState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint8 base_state\n"
"uint8 control_mode\n"
"uint8 fault_code\n"
"float64 battery_voltage\n"
"\n"
"ActuatorState[] actuator_states\n"
"\n"
"bool light_control_enabled\n"
"LightState front_light_state\n"
"LightState rear_light_state\n"
"\n"
"float64 linear_velocity\n"
"float64 angular_velocity\n"
"\n"
"float64 left_odometry\n"
"float64 right_odometry\n"
"================================================================================\n"
"MSG: car_agilex/ActuatorState\n"
"float64 motor_current\n"
"float64 motor_rpm\n"
"uint16 motor_pulses\n"
"float64 motor_temperature\n"
"\n"
"float64 driver_voltage\n"
"float64 driver_temperature\n"
"uint8 driver_state\n"
"================================================================================\n"
"MSG: car_agilex/LightState\n"
"uint8 mode\n"
"uint8 custom_value\n"
;
  }

  static const char* value(const ::car_agilex::ScoutState_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::car_agilex::ScoutState_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.base_state);
      stream.next(m.control_mode);
      stream.next(m.fault_code);
      stream.next(m.battery_voltage);
      stream.next(m.actuator_states);
      stream.next(m.light_control_enabled);
      stream.next(m.front_light_state);
      stream.next(m.rear_light_state);
      stream.next(m.linear_velocity);
      stream.next(m.angular_velocity);
      stream.next(m.left_odometry);
      stream.next(m.right_odometry);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ScoutState_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::car_agilex::ScoutState_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::car_agilex::ScoutState_<ContainerAllocator>& v)
  {
    s << indent << "base_state: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.base_state);
    s << indent << "control_mode: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.control_mode);
    s << indent << "fault_code: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.fault_code);
    s << indent << "battery_voltage: ";
    Printer<double>::stream(s, indent + "  ", v.battery_voltage);
    s << indent << "actuator_states[]" << std::endl;
    for (size_t i = 0; i < v.actuator_states.size(); ++i)
    {
      s << indent << "  actuator_states[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::car_agilex::ActuatorState_<ContainerAllocator> >::stream(s, indent + "    ", v.actuator_states[i]);
    }
    s << indent << "light_control_enabled: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.light_control_enabled);
    s << indent << "front_light_state: ";
    s << std::endl;
    Printer< ::car_agilex::LightState_<ContainerAllocator> >::stream(s, indent + "  ", v.front_light_state);
    s << indent << "rear_light_state: ";
    s << std::endl;
    Printer< ::car_agilex::LightState_<ContainerAllocator> >::stream(s, indent + "  ", v.rear_light_state);
    s << indent << "linear_velocity: ";
    Printer<double>::stream(s, indent + "  ", v.linear_velocity);
    s << indent << "angular_velocity: ";
    Printer<double>::stream(s, indent + "  ", v.angular_velocity);
    s << indent << "left_odometry: ";
    Printer<double>::stream(s, indent + "  ", v.left_odometry);
    s << indent << "right_odometry: ";
    Printer<double>::stream(s, indent + "  ", v.right_odometry);
  }
};

} // namespace message_operations
} // namespace ros

#endif // CAR_AGILEX_MESSAGE_SCOUTSTATE_H
