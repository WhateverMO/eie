# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from car_agilex/ScoutState.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import car_agilex.msg

class ScoutState(genpy.Message):
  _md5sum = "ad42d15ec27ffc879e399e0f8f4d5a2b"
  _type = "car_agilex/ScoutState"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """uint8 base_state
uint8 control_mode
uint8 fault_code
float64 battery_voltage

ActuatorState[] actuator_states

bool light_control_enabled
LightState front_light_state
LightState rear_light_state

float64 linear_velocity
float64 angular_velocity

float64 left_odometry
float64 right_odometry
================================================================================
MSG: car_agilex/ActuatorState
float64 motor_current
float64 motor_rpm
uint16 motor_pulses
float64 motor_temperature

float64 driver_voltage
float64 driver_temperature
uint8 driver_state
================================================================================
MSG: car_agilex/LightState
uint8 mode
uint8 custom_value"""
  __slots__ = ['base_state','control_mode','fault_code','battery_voltage','actuator_states','light_control_enabled','front_light_state','rear_light_state','linear_velocity','angular_velocity','left_odometry','right_odometry']
  _slot_types = ['uint8','uint8','uint8','float64','car_agilex/ActuatorState[]','bool','car_agilex/LightState','car_agilex/LightState','float64','float64','float64','float64']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       base_state,control_mode,fault_code,battery_voltage,actuator_states,light_control_enabled,front_light_state,rear_light_state,linear_velocity,angular_velocity,left_odometry,right_odometry

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(ScoutState, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.base_state is None:
        self.base_state = 0
      if self.control_mode is None:
        self.control_mode = 0
      if self.fault_code is None:
        self.fault_code = 0
      if self.battery_voltage is None:
        self.battery_voltage = 0.
      if self.actuator_states is None:
        self.actuator_states = []
      if self.light_control_enabled is None:
        self.light_control_enabled = False
      if self.front_light_state is None:
        self.front_light_state = car_agilex.msg.LightState()
      if self.rear_light_state is None:
        self.rear_light_state = car_agilex.msg.LightState()
      if self.linear_velocity is None:
        self.linear_velocity = 0.
      if self.angular_velocity is None:
        self.angular_velocity = 0.
      if self.left_odometry is None:
        self.left_odometry = 0.
      if self.right_odometry is None:
        self.right_odometry = 0.
    else:
      self.base_state = 0
      self.control_mode = 0
      self.fault_code = 0
      self.battery_voltage = 0.
      self.actuator_states = []
      self.light_control_enabled = False
      self.front_light_state = car_agilex.msg.LightState()
      self.rear_light_state = car_agilex.msg.LightState()
      self.linear_velocity = 0.
      self.angular_velocity = 0.
      self.left_odometry = 0.
      self.right_odometry = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3Bd().pack(_x.base_state, _x.control_mode, _x.fault_code, _x.battery_voltage))
      length = len(self.actuator_states)
      buff.write(_struct_I.pack(length))
      for val1 in self.actuator_states:
        _x = val1
        buff.write(_get_struct_2dH3dB().pack(_x.motor_current, _x.motor_rpm, _x.motor_pulses, _x.motor_temperature, _x.driver_voltage, _x.driver_temperature, _x.driver_state))
      _x = self
      buff.write(_get_struct_5B4d().pack(_x.light_control_enabled, _x.front_light_state.mode, _x.front_light_state.custom_value, _x.rear_light_state.mode, _x.rear_light_state.custom_value, _x.linear_velocity, _x.angular_velocity, _x.left_odometry, _x.right_odometry))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.actuator_states is None:
        self.actuator_states = None
      if self.front_light_state is None:
        self.front_light_state = car_agilex.msg.LightState()
      if self.rear_light_state is None:
        self.rear_light_state = car_agilex.msg.LightState()
      end = 0
      _x = self
      start = end
      end += 11
      (_x.base_state, _x.control_mode, _x.fault_code, _x.battery_voltage,) = _get_struct_3Bd().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.actuator_states = []
      for i in range(0, length):
        val1 = car_agilex.msg.ActuatorState()
        _x = val1
        start = end
        end += 43
        (_x.motor_current, _x.motor_rpm, _x.motor_pulses, _x.motor_temperature, _x.driver_voltage, _x.driver_temperature, _x.driver_state,) = _get_struct_2dH3dB().unpack(str[start:end])
        self.actuator_states.append(val1)
      _x = self
      start = end
      end += 37
      (_x.light_control_enabled, _x.front_light_state.mode, _x.front_light_state.custom_value, _x.rear_light_state.mode, _x.rear_light_state.custom_value, _x.linear_velocity, _x.angular_velocity, _x.left_odometry, _x.right_odometry,) = _get_struct_5B4d().unpack(str[start:end])
      self.light_control_enabled = bool(self.light_control_enabled)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3Bd().pack(_x.base_state, _x.control_mode, _x.fault_code, _x.battery_voltage))
      length = len(self.actuator_states)
      buff.write(_struct_I.pack(length))
      for val1 in self.actuator_states:
        _x = val1
        buff.write(_get_struct_2dH3dB().pack(_x.motor_current, _x.motor_rpm, _x.motor_pulses, _x.motor_temperature, _x.driver_voltage, _x.driver_temperature, _x.driver_state))
      _x = self
      buff.write(_get_struct_5B4d().pack(_x.light_control_enabled, _x.front_light_state.mode, _x.front_light_state.custom_value, _x.rear_light_state.mode, _x.rear_light_state.custom_value, _x.linear_velocity, _x.angular_velocity, _x.left_odometry, _x.right_odometry))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.actuator_states is None:
        self.actuator_states = None
      if self.front_light_state is None:
        self.front_light_state = car_agilex.msg.LightState()
      if self.rear_light_state is None:
        self.rear_light_state = car_agilex.msg.LightState()
      end = 0
      _x = self
      start = end
      end += 11
      (_x.base_state, _x.control_mode, _x.fault_code, _x.battery_voltage,) = _get_struct_3Bd().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.actuator_states = []
      for i in range(0, length):
        val1 = car_agilex.msg.ActuatorState()
        _x = val1
        start = end
        end += 43
        (_x.motor_current, _x.motor_rpm, _x.motor_pulses, _x.motor_temperature, _x.driver_voltage, _x.driver_temperature, _x.driver_state,) = _get_struct_2dH3dB().unpack(str[start:end])
        self.actuator_states.append(val1)
      _x = self
      start = end
      end += 37
      (_x.light_control_enabled, _x.front_light_state.mode, _x.front_light_state.custom_value, _x.rear_light_state.mode, _x.rear_light_state.custom_value, _x.linear_velocity, _x.angular_velocity, _x.left_odometry, _x.right_odometry,) = _get_struct_5B4d().unpack(str[start:end])
      self.light_control_enabled = bool(self.light_control_enabled)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2dH3dB = None
def _get_struct_2dH3dB():
    global _struct_2dH3dB
    if _struct_2dH3dB is None:
        _struct_2dH3dB = struct.Struct("<2dH3dB")
    return _struct_2dH3dB
_struct_3Bd = None
def _get_struct_3Bd():
    global _struct_3Bd
    if _struct_3Bd is None:
        _struct_3Bd = struct.Struct("<3Bd")
    return _struct_3Bd
_struct_5B4d = None
def _get_struct_5B4d():
    global _struct_5B4d
    if _struct_5B4d is None:
        _struct_5B4d = struct.Struct("<5B4d")
    return _struct_5B4d
